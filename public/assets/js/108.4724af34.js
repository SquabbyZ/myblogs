(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{517:function(t,e,o){"use strict";o.r(e);var v=o(4),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("div",{staticClass:"custom-block tip"},[o("p",{staticClass:"custom-block-title"},[t._v("生命周期的简化理解")]),t._v(" "),o("p",[t._v("在某一时刻，可以自动执行的函数")])]),t._v(" "),o("h2",{attrs:{id:"react-生命周期图"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#react-生命周期图"}},[t._v("#")]),t._v(" React 生命周期图")]),t._v(" "),o("p",[o("img",{attrs:{src:"http://lc-zltjehaI.cn-n1.lcfile.com/c876cfd990beda77398d/react4-1.jpg",alt:""}})]),t._v(" "),o("h2",{attrs:{id:"initialization-初始化阶段"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#initialization-初始化阶段"}},[t._v("#")]),t._v(" Initialization 初始化阶段")]),t._v(" "),o("p",[t._v("主要指的是 "),o("code",[t._v("state")]),t._v(" 和 "),o("code",[t._v("props")])]),t._v(" "),o("h2",{attrs:{id:"mounting-挂载阶段"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mounting-挂载阶段"}},[t._v("#")]),t._v(" Mounting 挂载阶段")]),t._v(" "),o("p",[t._v("componentWillMount "),o("code",[t._v("dom")]),t._v(" 渲染前触发的生命周期函数")]),t._v(" "),o("p",[t._v("render  "),o("code",[t._v("dom")]),t._v(" 渲染中")]),t._v(" "),o("p",[t._v("componentDidMount "),o("code",[t._v("dom")]),t._v(" 渲染完成后触发的生命周期函数")]),t._v(" "),o("h2",{attrs:{id:"updation-组件发生更新的时候的生命周期函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#updation-组件发生更新的时候的生命周期函数"}},[t._v("#")]),t._v(" Updation 组件发生更新的时候的生命周期函数")]),t._v(" "),o("ol",[o("li",[o("code",[t._v("shouldComponentUpdate")]),t._v("  在组件更新之前执行的函数,"),o("strong",[t._v("在  "),o("code",[t._v("render")]),t._v(" 函数执行之前")]),t._v("\n需要注意的是这个生命周期函数必须要返回一个布尔值，否则会报"),o("code",[t._v("index.js:1 Warning: Xiaojiejie.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.")])])]),t._v(" "),o("p",[o("b",{staticStyle:{color:"red"}},[t._v("返回 "),o("code",[t._v("true")]),t._v(" 才会继续往下执行 "),o("code",[t._v("render")]),t._v(" 的函数,返回 "),o("code",[t._v("false")]),t._v(" 就不会往下执行")])]),t._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("code",[t._v("componentWillUpdate")]),t._v(" 在 "),o("code",[t._v("shouldComponentUpdate")]),t._v(" 之后,在 "),o("code",[t._v("render")]),t._v(" 之前执行")])]),t._v(" "),o("li",[o("p",[o("code",[t._v("componentDidUpdate")]),t._v(" 在 "),o("code",[t._v("render")]),t._v(" 后执行")])]),t._v(" "),o("li",[o("p",[o("code",[t._v("componetWillReceiveProps")]),o("br"),o("strong",[t._v("难点")]),o("br"),t._v("该生命周期函数在组件第一次加载的时候不会触发，后面更新的时候才会触发。")])])]),t._v(" "),o("h2",{attrs:{id:"unmounting-卸载之前"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#unmounting-卸载之前"}},[t._v("#")]),t._v(" Unmounting 卸载之前")]),t._v(" "),o("p",[o("code",[t._v("componentWillUnmount")]),t._v(" 组件卸载之前执行的函数")]),t._v(" "),o("h2",{attrs:{id:"组件优化"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#组件优化"}},[t._v("#")]),t._v(" 组件优化")]),t._v(" "),o("p",[t._v("一般情况下，我们会使用 "),o("code",[t._v("shouldComponentUpdate")]),t._v(",来做组件优化，因为 "),o("code",[t._v("shouldComponentUpdate")]),t._v(",返回 false 的时候，后面的 "),o("code",[t._v("render")]),t._v(" 等函数就不会执行，所以可以通过 "),o("code",[t._v("shouldComponentUpdate")]),t._v(" 中的两个参数 "),o("code",[t._v("nextProps")]),t._v(" 和 "),o("code",[t._v("nextState")]),t._v(" 来进行判断，举例当我们做了一个 "),o("code",[t._v("TodoList")]),t._v(" 的时候，在 "),o("code",[t._v("shouldComponentUpdate")]),t._v(" 生命周期函数中，比较 "),o("code",[t._v("nextProps")]),t._v(" 中的值和 "),o("code",[t._v("this.props")]),t._v(" 中对应的值是否发生改变，要是改变了就返回 "),o("code",[t._v("true")]),t._v(" 如果没有改变就返回 "),o("code",[t._v("false")])])])}),[],!1,null,null,null);e.default=_.exports}}]);