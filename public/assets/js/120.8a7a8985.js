(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{446:function(s,t,a){"use strict";a.r(t);var n=a(3),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("ol",[a("li",[a("p",[s._v("给 JSX 语法中的 HTML 元素添加 class  名的时候不能写成 "),a("code",[s._v("class='active'")]),s._v(" 要写成 "),a("code",[s._v("className:'active")]),s._v(",因为在 ES6 中 "),a("code",[s._v("class")]),s._v(" 被做成关键字 "),a("code",[s._v("类")]),s._v(" 使用，虽然会正常显示，但是会报红色警告 "),a("code",[s._v("index.js:1 Warning: Invalid DOM property 'class'. Did you mean 'className'?")])])]),s._v(" "),a("li",[a("p",[s._v("当我们在单个组件内自定义一个方法去修改 "),a("code",[s._v("state")]),s._v(" 里的值的时候，发现报 "),a("code",[s._v("Uncaught TypeError: Cannot read property 'setState' of undefined")]),s._v(",意思是 "),a("code",[s._v("setState")]),s._v(" 前面的 "),a("code",[s._v("this")]),s._v(" 找不到，这是因为我们在创建方法的时候,"),a("code",[s._v("this")]),s._v(" 指向的是本身，而不是 "),a("code",[s._v("state")]),s._v(" 的 "),a("code",[s._v("this")]),s._v(",所以我们在调用的时候，"),a("code",[s._v("setState")]),s._v(" 找不到 "),a("code",[s._v("this")]),s._v(",我们只需要在调用方法的时候在后面加上个 "),a("code",[s._v(".bind(this)")]),s._v(" "),a("strong",[s._v("最好是在 "),a("code",[s._v("constructor")]),s._v(" 中进行绑定,举例"),a("code",[s._v("this.handleClick=this.handleClick.bind(this)")])]),s._v(",把外部的 "),a("code",[s._v("state")]),s._v(" 的 "),a("code",[s._v("this")]),s._v(" 传入进去(PS: "),a("code",[s._v("bind")]),s._v(" 相对于 "),a("code",[s._v("call")]),s._v(" 和 "),a("code",[s._v("apply")]),s._v(" 的区别是改变 "),a("code",[s._v("this")]),s._v(" 指向但是不立即调用),"),a("strong",[s._v("直接使用 ES6 的箭头函数也是可以的")])])]),s._v(" "),a("li",[a("p",[s._v("通过 "),a("code",[s._v("input")]),s._v(" 输入的值，添加到 "),a("code",[s._v("li")]),s._v(" 列表中，但是输入的是带有 "),a("code",[s._v("html")]),s._v(" 标签包裹的文本，要显示正常的 "),a("code",[s._v("html")]),s._v(" 效果比如 "),a("code",[s._v("<b>I Love React</b>")]),s._v(" ，显示为 "),a("strong",[s._v("I Love React")]),s._v(" ,而不是  "),a("code",[s._v("<b>I Love React</b>")]),s._v("，")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("解决办法:是在循环生成的 `li` 上加入一个属性 `dangerouslySetInnerHTML={{__html:item}}`,在把 `li` 标签包裹中的 `{item}`,去掉即可.\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[s._v("JSX 中循环生成列表的时候，要记得写 key 值，不写会报红色警告 "),a("code",[s._v('index.js:1 Warning: Each child in a list should have a unique "key" prop.')]),s._v(",写 "),a("code",[s._v("key")]),s._v(" 的目的是为了更方便虚拟 "),a("code",[s._v("DOM")]),s._v(" 的渲染")])]),s._v(" "),a("li",[a("p",[s._v("在 JSX 语法中写注释，也就是说在 "),a("code",[s._v("{}")]),s._v(" 中写注释不要使用 "),a("code",[s._v("//")]),s._v(" 单行注释，因为单行注释会把 "),a("code",[s._v("{}")]),s._v(" 的结尾符号 "),a("code",[s._v("}")]),s._v(" 也注释掉，会报错，要使用 "),a("code",[s._v("/* .... */")]),s._v(" 多行注释")])]),s._v(" "),a("li",[a("p",[s._v("开发中要谨记 React 中不允许直接修改 state 中的值，虽然不会报错，但是会造成逻辑错误的问题，很难定位到问题，举例点击列表其中一项就删除该项")])])]),s._v(" "),a("p",[s._v("错误写法")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newList "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    list"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("newList\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n造成的显示效果是，你删除最后一个，显示的效果是只留第一个，其余的全部会被删掉，而且控制台不会报错\n*/")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("正确写法")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newList "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("list\nnewList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    list"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("newList\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ol",{attrs:{start:"7"}},[a("li",[a("p",[s._v("React 单个组件中的 "),a("code",[s._v("render")]),s._v(" 方法中的 "),a("code",[s._v("return")]),s._v(" 返回的标签最外层必须且只有一个最外层的 "),a("code",[s._v("DOM")]),s._v(" 包裹，否则会报"),a("code",[s._v("Parsing error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?")]),s._v(",但是有的时候我们不想为了解决这个问题，而在外层包裹一个无意义的 "),a("code",[s._v("DOM")]),s._v(" 标签，所以，可以在引入 "),a("code",[s._v("React")]),s._v(" 的 "),a("code",[s._v("Component")]),s._v(" 的时候再引入一个 "),a("code",[s._v("Fragment")]),s._v(",将最外层无意义的 "),a("code",[s._v("div")]),s._v(" 换成这个标签即可。")])]),s._v(" "),a("li",[a("p",[s._v("React 中可以使用 "),a("code",[s._v("styled-components")]),s._v(" ,用 "),a("code",[s._v("styled-components")]),s._v(" 对样式也进行了组件化，这样每个组件拥有了自己的功能，还拥有了自己的样式，从而能够实现真正意义上的复用。"),a("code",[s._v("react")]),s._v(" 通过 "),a("code",[s._v("state")]),s._v(" 来控制组件，而 "),a("code",[s._v("styled-components")]),s._v(" 也可以通过state的改变来动态的改变组件的样式。\n详细文档可以查阅"),a("a",{attrs:{href:"https://styled-components.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("styled-components 官网"),a("OutboundLink")],1),s._v(" "),a("strong",[s._v("基础用法")])])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 创建了一个Wrapper样式组件，该组件渲染之后是一个div标签 */")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Wrapper "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" styled"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("div"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\n    color: blue;\n  ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Wrapper组件跟其余的react组件一样，只不过现在他们有了自己的样式 */")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Wrapper"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n        Hello World"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("Wrapper"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ol",{attrs:{start:"9"}},[a("li",[s._v("React 中 "),a("code",[s._v("onClick={this.方法(value)}")]),s._v(",然后在 "),a("code",[s._v("render")]),s._v(" 函数下声明方法的方式 "),a("code",[s._v("方法=(value)=>{}")]),s._v(",这样虽然会省去用 "),a("code",[s._v("bind()")]),s._v(" 把 "),a("code",[s._v("this")]),s._v(" 传入到生成的方法中，但是会造成 "),a("strong",[a("code",[s._v("React")]),s._v(" 页面渲染后自动执行 "),a("code",[s._v("onClick")]),s._v(" 事件，再次点击时候不生效")]),s._v("，\n正确的写法")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("onClick")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" this.某方法"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("某参数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n// 或者\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("onClick")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("this.某方法.bind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("this, 某参数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("问题原因是:在声明时就直接执行了（因而加载页面自动执行），执行后的返回值赋给了onClick属性（返回值必然不会是个函数，因而再点击没有作用）")])])}),[],!1,null,null,null);t.default=e.exports}}]);